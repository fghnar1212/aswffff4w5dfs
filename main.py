# main.py
import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Document
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramForbiddenError
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN"))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

from database import (
    init_db, get_or_create_user, register_referral, is_duplicate,
    add_wallet_hash, update_user_stats, get_user, get_stats,
    get_referral_count, get_referral_earnings, add_referral_bonus,
    hash_line
)
from wallet_utils import seed_to_address, private_key_to_address
from rpc_client import has_erc20_or_bep20_activity

class UploadFile(StatesGroup):
    waiting_file = State()

class SupportState(StatesGroup):
    waiting_for_message = State()

class WithdrawState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_address = State()

class AdminState(StatesGroup):
    waiting_for_password = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
    ]
)

back_menu = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
)

@dp.message(CommandStart())
async def start_cmd(message: Message):
    print(f"üì© /start –æ—Ç {message.from_user.id}")
    try:
        args = message.text.split()
        referrer_id = None
        if len(args) > 1 and args[1].startswith("ref_"):
            try:
                referrer_id = int(args[1].replace("ref_", ""))
            except:
                pass

        await get_or_create_user(message.from_user.id, message.from_user.username or "unknown")
        if referrer_id and referrer_id != message.from_user.id:
            await register_referral(message.from_user.id, referrer_id)

        ref_link = f"https://t.me/your_bot_username_bot?start=ref_{message.from_user.id}"
        text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
            "üõí <b>–°–∫—É–ø–∫–∞ SEED-—Ñ—Ä–∞–∑ –∏ Private-–∫–ª—é—á–µ–π</b> —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤ —Å–µ—Ç—è—Ö:\n"
            "‚Ä¢ <b>ERC-20 (Ethereum)</b>\n"
            "‚Ä¢ <b>BEP-20 (BNB Smart Chain)</b>\n\n"
            "üí∞ <b>–¶–µ–Ω—ã:</b>\n"
            "‚Ä¢ üå± SEED-—Ñ—Ä–∞–∑–∞ ‚Äî <b>235‚ÇΩ</b>\n"
            "‚Ä¢ üîë Private-key ‚Äî <b>145‚ÇΩ</b>\n\n"
            "üí∏ <b>–ü–õ–ê–¢–ò–ú –°–ê–ú–£–Æ –í–´–°–û–ö–£–Æ –¶–ï–ù–£</b> + <b>70% –æ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∫–∏</b> –ø–æ–º–∏–º–æ –ø—Ä–∞–π—Å–∞!\n\n"
            "üîù <b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
            "‚îú ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n"
            "‚îú ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–ø–ª–∞—Ç—ã\n"
            "‚îú üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
            "‚îî üîç –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n"
            "üïí <b>–í—ã–ø–ª–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 (–ú–°–ö)</b>\n"
            "–í—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        await message.answer(text, reply_markup=main_menu)
    except TelegramForbiddenError:
        pass
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ start: {e}")

# --- –ö–Ω–æ–ø–∫–∏ ---
@dp.callback_query(F.data == "upload")
async def upload_file_cb(callback: CallbackQuery, state: FSMContext):
    print(f"üìÅ –ö–Ω–æ–ø–∫–∞ 'upload' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    try:
        await callback.message.answer(
            "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>.txt</b>.\n\n"
            "üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ <b>20 –ú–ë</b>.\n"
            "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
        )
        await state.set_state(UploadFile.waiting_file)
        await callback.answer()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ upload: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == "profile")
async def profile_cb(callback: CallbackQuery):
    print(f"üë§ –ö–Ω–æ–ø–∫–∞ 'profile' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
    try:
        user = await get_user(callback.from_user.id)
        if not user:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è.")
            await callback.answer()
            return

        text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{user['user_id']}</code>\n"
            f"üìù –°—Ç—Ä–æ–∫: {user['total_lines']}\n"
            f"üå± SEED: {user['unique_seeds']}\n"
            f"üîë Keys: {user['unique_keys']}\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user['balance']:.2f} RUB"
        )
        await callback.message.edit_text(text, reply_markup=back_menu)
        await callback.answer()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ profile: {e}")
        await callback.answer("–û—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == "back")
async def back_cb(callback: CallbackQuery):
    print(f"üîô –ö–Ω–æ–ø–∫–∞ 'back' –Ω–∞–∂–∞—Ç–∞")
    try:
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        await callback.answer()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ back: {e}")

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–∏–º–µ—Ä) ---
@dp.callback_query(F.data == "rules")
async def rules_cb(callback: CallbackQuery):
    text = (
        "üìú <b>–ü—Ä–∞–≤–∏–ª–∞</b>\n\n"
        "1. –¢–æ–ª—å–∫–æ .txt —Ñ–∞–π–ª—ã\n"
        "2. –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ (ETH/BNB)\n"
        "3. –û–±–º–∞–Ω = –±–∞–Ω\n"
        "4. –í—ã–ø–ª–∞—Ç—ã –≤ 23:00 (–ú–°–ö)"
    )
    await callback.message.edit_text(text, reply_markup=back_menu)
    await callback.answer()

# --- process_file, support, withdraw –∏ —Ç.–¥. –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö ---

async def main():
    await init_db()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
